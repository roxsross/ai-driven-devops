name: AI Scheduled Monitoring

# Run every 6 hours and on manual trigger
on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:  # Manual trigger
    inputs:
      environment:
        description: 'Environment to monitor'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      health-threshold:
        description: 'Health threshold (0-100)'
        required: false
        default: '80'
        type: string

jobs:
  ai-health-monitoring:
    name: AI Health Monitoring
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [production, staging]  # Monitor multiple environments
      fail-fast: false  # Continue even if one environment fails
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: AI Health Check - ${{ matrix.environment }}
        id: ai-monitor
        uses: roxsross/ai-driven-devops@main
        with:
          # Monitoring settings
          simulation-mode: 'false'
          blocking-mode: 'false'  # Don't block, just report
          health-threshold: ${{ inputs.health-threshold || '80' }}
          
          # AWS Bedrock Configuration
          bedrock-model-id: ${{ secrets.BEDROCK_MODEL_ID }}
          
          # Monitoring Integration
          prometheus-url: ${{ secrets.PROM_URL }}
          grafana-url: ${{ secrets.GRAFANA_URL }}
          grafana-token: ${{ secrets.GRAFANA_TOKEN }}
          
          # Application Configuration
          namespace: 'production'  # Change to your namespace
          app-name: 'my-application'  # Change to your app name
          cluster-name: 'my-cluster'  # Change to your cluster name
          
          # Notifications
          telegram-bot-token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          telegram-chat-id: ${{ secrets.TELEGRAM_CHAT_ID }}
          
          # CI/CD Context
          ci-pipeline-id: ${{ github.run_id }}
          ci-environment: ${{ matrix.environment }}
          ci-commit-sha: ${{ github.sha }}
      
      - name: Create Issue on Critical Problems
        if: steps.ai-monitor.outputs.recommendation == 'block'
        uses: actions/github-script@v7
        with:
          script: |
            const healthScore = '${{ steps.ai-monitor.outputs.health-score }}';
            const criticalIssues = '${{ steps.ai-monitor.outputs.critical-issues }}';
            const environment = '${{ matrix.environment }}';
            const timestamp = new Date().toISOString();
            
            const title = `🚨 Critical Health Issues Detected in ${environment.toUpperCase()}`;
            
            const body = `## 🚨 AI Monitoring Alert
            
            **Application:** My Application
            **Environment:** ${environment}
            **Timestamp:** ${timestamp}
            **Health Score:** ${healthScore}/100
            **Critical Issues:** ${criticalIssues}
            
            ### 🔍 Details
            The AI monitoring system has detected critical issues that require immediate attention.
            
            ### 🛠️ Recommended Actions
            1. Check application logs for errors
            2. Review system metrics and performance
            3. Verify infrastructure health
            4. Check resource utilization (CPU, memory, disk)
            5. Verify database connections and queries
            6. Consider scaling or restarting services if needed
            
            ### 📊 Monitoring Links
            - [Grafana Dashboard](${{ secrets.GRAFANA_URL }})
            - [Prometheus Metrics](${{ secrets.PROM_URL }})
            
            ---
            *🤖 Auto-generated by AI Scheduled Monitoring*
            *Run ID: ${{ github.run_id }}*`;
            
            // Check if similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'ai-monitoring,critical'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes(environment.toUpperCase()) && 
              issue.title.includes('Critical Health Issues')
            );
            
            if (!existingIssue) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['ai-monitoring', 'critical', environment, 'health-check']
              });
            } else {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `## 🔄 Updated Alert - ${timestamp}\n\n${body}`
              });
            }
      
      - name: Generate Health Report
        run: |
          echo "## 📊 AI Health Monitoring Report - ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application:** My Application" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Namespace:** production" >> $GITHUB_STEP_SUMMARY
          echo "**Cluster:** my-cluster" >> $GITHUB_STEP_SUMMARY
          echo "**Health Score:** ${{ steps.ai-monitor.outputs.health-score }}/100" >> $GITHUB_STEP_SUMMARY
          echo "**Critical Issues:** ${{ steps.ai-monitor.outputs.critical-issues }}" >> $GITHUB_STEP_SUMMARY
          echo "**Recommendation:** ${{ steps.ai-monitor.outputs.recommendation }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.ai-monitor.outputs.recommendation }}" = "deploy" ]; then
            echo "✅ **System Status:** Healthy" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **Performance:** Optimal" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **System Status:** Needs Attention" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **Performance:** Degraded - Immediate attention required" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload Health Metrics
        uses: actions/upload-artifact@v4
        with:
          name: health-report-${{ matrix.environment }}-${{ github.run_id }}
          path: |
            /tmp/health-*.json
            /tmp/metrics-*.log
          retention-days: 30
        continue-on-error: true

  # Summary job that runs after all environments are checked
  monitoring-summary:
    name: Monitoring Summary
    runs-on: ubuntu-latest
    needs: ai-health-monitoring
    if: always()
    
    steps:
      - name: Generate Overall Summary
        uses: actions/github-script@v7
        with:
          script: |
            const timestamp = new Date().toISOString();
            
            // This would ideally aggregate results from all environments
            // For now, we'll create a simple summary
            
            const body = `## 📊 AI Monitoring Summary - ${timestamp}
            
            ### 🎯 Application Monitored
            **My Application** running on **my-cluster**
            
            ### 🌍 Environments Checked
            - Production
            - Staging
            
            ### 📈 System Metrics Status
            Check individual environment results for:
            - Application performance
            - Resource utilization
            - Error rates and latency
            - Infrastructure health
            
            ### 🔗 Monitoring Links
            - [Grafana Dashboard](${{ secrets.GRAFANA_URL }}) - Performance Metrics
            - [Prometheus Metrics](${{ secrets.PROM_URL }}) - Real-time Stats
            - [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) - Full Analysis
            
            ### 🎯 Health Assessment
            All environments have been analyzed for optimal performance and reliability.
            
            ---
            *🤖 AI-Driven Monitoring Complete*`;
            
            console.log(body);
